[{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantifying differential rhythmicity between conditions","text":"show use limorhyde2 quantify rhythmicity differential rhythmicity data multiple conditions. data based liver samples wild-type Rev-erb\\(\\alpha/\\beta\\) double-knockout mice (Cho et al. 2012 GSE34018).","code":""},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Quantifying differential rhythmicity between conditions","text":"","code":"library('data.table') library('ggplot2') library('limorhyde2') library('qs')  # doParallel::registerDoParallel() # register a parallel backend to minimize runtime theme_set(theme_bw())"},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Quantifying differential rhythmicity between conditions","text":"expression data matrix one row per gene one column per sample. metadata table one row per sample. save time space, expression data include subset genes.","code":"y = GSE34018$y y[1:5, 1:5] #>       GSM840516 GSM840517 GSM840518 GSM840519 GSM840520 #> 12686 11.962830 11.923338 11.098814 10.958933  9.256413 #> 13170  8.989743  9.132606 12.381036 12.441759 14.766070 #> 26897 11.515292 11.625519 10.579969 10.601969 11.096489 #> 11287  7.985859  7.930935  7.674688  7.899531  7.768563 #> 12046  8.024084  7.856703  7.942198  8.172695  7.981340  metadata = GSE34018$metadata metadata #>        sample      cond time #>  1: GSM840516 wild-type    0 #>  2: GSM840517 wild-type    0 #>  3: GSM840518 wild-type    4 #>  4: GSM840519 wild-type    4 #>  5: GSM840520 wild-type    8 #>  6: GSM840521 wild-type    8 #>  7: GSM840522 wild-type   12 #>  8: GSM840523 wild-type   12 #>  9: GSM840524 wild-type   16 #> 10: GSM840525 wild-type   16 #> 11: GSM840526 wild-type   20 #> 12: GSM840527 wild-type   20 #> 13: GSM840504  knockout    0 #> 14: GSM840505  knockout    0 #> 15: GSM840506  knockout    4 #> 16: GSM840507  knockout    4 #> 17: GSM840508  knockout    8 #> 18: GSM840509  knockout    8 #> 19: GSM840510  knockout   12 #> 20: GSM840511  knockout   12 #> 21: GSM840512  knockout   16 #> 22: GSM840513  knockout   16 #> 23: GSM840514  knockout   20 #> 24: GSM840515  knockout   20 #>        sample      cond time"},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"fit-linear-models-and-compute-posterior-fits","dir":"Articles","previous_headings":"","what":"Fit linear models and compute posterior fits","title":"Quantifying differential rhythmicity between conditions","text":"samples acquired relatively low temporal resolution (every 4 h), use three knots instead default four, reduces flexibility spline curves. specify condColname getModelFit() knows fit differential rhythmicity model.","code":"fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit)"},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"get-rhythm-statistics","dir":"Articles","previous_headings":"","what":"Get rhythm statistics","title":"Quantifying differential rhythmicity between conditions","text":"Next, use posterior fits compute rhythm statistics gene condition.","code":"rhyStats = getRhythmStats(fit) print(rhyStats, nrows = 10L) #>           cond   feature peak_phase peak_value trough_phase trough_value #>   1: wild-type     12686   0.000000  11.848689    10.510719     8.814508 #>   2: wild-type     13170   9.431107  15.056098    22.129887     9.039250 #>   3: wild-type     26897  18.371177  12.403175     4.623781    10.745386 #>   4: wild-type     11287  22.517494   7.903967     7.586936     7.794846 #>   5: wild-type     12046   5.694928   7.984916    20.181606     7.971871 #>  ---                                                                     #>  96:  knockout    317750  22.569400   8.197825     7.890174     8.050101 #>  97:  knockout    329015  18.277878   9.367790    10.330503     9.236423 #>  98:  knockout    381760  19.734165   9.456695     9.938374     9.257839 #>  99:  knockout    434864  21.966042   7.912880     8.649651     7.761379 #> 100:  knockout 110599566   6.508437   8.959367    22.779614     8.945090 #>      peak_trough_amp     mesor #>   1:      3.03418170 10.368427 #>   2:      6.01684814 12.018767 #>   3:      1.65778881 11.675870 #>   4:      0.10912046  7.854743 #>   5:      0.01304465  7.979693 #>  ---                           #>  96:      0.14772364  8.104574 #>  97:      0.13136624  9.296439 #>  98:      0.19885626  9.353978 #>  99:      0.15150048  7.829699 #> 100:      0.01427692  8.953484"},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"get-differential-rhythm-statistics","dir":"Articles","previous_headings":"","what":"Get differential rhythm statistics","title":"Quantifying differential rhythmicity between conditions","text":"can now calculate rhythmic differences gene two conditions, wild-type knockout. can examine distributions statistics various ways, ranking genes difference peak--trough amplitude (p-values necessary) plotting difference peak--trough amplitude vs. difference mean expression.","code":"diffRhyStats = getDiffRhythmStats(fit, rhyStats) print(diffRhyStats, nrows = 10L) #>       feature     cond1    cond2 mean_mesor mean_peak_trough_amp   diff_mesor #>  1:    103266 wild-type knockout   9.094249          0.184903036  0.051687912 #>  2:    108897 wild-type knockout   7.958910          0.006831757 -0.005168699 #>  3: 110599566 wild-type knockout   8.938463          0.069308476  0.030043525 #>  4:     11287 wild-type knockout   7.867503          0.116526530  0.025519670 #>  5:     12046 wild-type knockout   8.038329          0.170680319  0.117271901 #> ---                                                                           #> 46:     72114 wild-type knockout   7.815911          0.102562698 -0.031350508 #> 47:     74087 wild-type knockout   7.876956          0.120937382  0.031165093 #> 48:     75801 wild-type knockout   7.885490          0.009974481  0.021612144 #> 49:     78697 wild-type knockout   8.435127          0.016110453  0.030223706 #> 50:     93877 wild-type knockout   8.060970          0.134552916  0.103128679 #>     diff_peak_trough_amp diff_peak_phase diff_trough_phase diff_rhy_dist #>  1:         -0.214572098       -4.188981         0.4565494    0.26587667 #>  2:         -0.006489454       10.576316         9.3558268    0.01348066 #>  3:         -0.110063106       -6.830498        -6.7648712    0.12818012 #>  4:          0.014812131       -6.040059        -7.8807586    0.16598258 #>  5:          0.315271340       -6.811385        11.1769819    0.33131162 #> ---                                                                      #> 46:          0.037126061       -9.577629         6.1331939    0.19524286 #> 47:         -0.025998153       -2.082278        -2.0154710    0.06976247 #> 48:         -0.012272708        5.695024        -8.5424574    0.01626120 #> 49:         -0.001703226        8.330807         9.3559106    0.02858621 #> 50:         -0.086004439       10.791143         8.1130055    0.26608906 print(diffRhyStats[order(diff_peak_trough_amp)], nrows = 10L) #>     feature     cond1    cond2 mean_mesor mean_peak_trough_amp  diff_mesor #>  1:   13170 wild-type knockout  12.616280            4.3073908  1.19502624 #>  2:   12686 wild-type knockout  10.157657            1.7859377 -0.42154165 #>  3:   26897 wild-type knockout  10.473462            1.0551507 -2.40481581 #>  4:   14385 wild-type knockout  10.335544            0.6410604 -0.23091881 #>  5:   56209 wild-type knockout  11.382764            0.5173328 -0.29032848 #> ---                                                                        #> 46:   13507 wild-type knockout   7.983178            0.1552713  0.15367719 #> 47:   17252 wild-type knockout   9.983190            0.2583523 -0.08320065 #> 48:   12046 wild-type knockout   8.038329            0.1706803  0.11727190 #> 49:   20775 wild-type knockout  11.830131            1.3835675  0.24859164 #> 50:   22113 wild-type knockout   8.395714            0.6561732  0.26000350 #>     diff_peak_trough_amp diff_peak_phase diff_trough_phase diff_rhy_dist #>  1:           -3.4189147      -0.8277360       -0.01805794     3.5242228 #>  2:           -2.4964879      -6.4332587       -0.45100842     3.1408093 #>  3:           -1.2052763      -0.5625297        5.85548916     1.2119948 #>  4:           -0.9487905       5.2747430       -1.96740822     1.0962868 #>  5:           -0.5254610      -0.9897313        0.16651740     0.5379302 #> ---                                                                      #> 46:            0.2214059       4.7481008       -0.10424266     0.2551407 #> 47:            0.2605478      -5.3279342        2.99082880     0.3873103 #> 48:            0.3152713      -6.8113848       11.17698193     0.3313116 #> 49:            0.4137977       3.5329385       -1.78226089     1.2889095 #> 50:            0.5568909      -0.2510863       -2.68931784     0.5582583  ggplot(diffRhyStats) +   geom_point(aes(x = diff_mesor, y = diff_peak_trough_amp), alpha = 0.2) +   labs(x = bquote(Delta * 'mesor (norm.)'), y = bquote(Delta * 'amplitude (norm.)'))"},{"path":"https://limorhyde2.hughylab.org/articles/differential-rhythmicity.html","id":"get-observed-and-fitted-time-courses","dir":"Articles","previous_headings":"","what":"Get observed and fitted time-courses","title":"Quantifying differential rhythmicity between conditions","text":"can compute expected measurements one genes one time-points condition, correspond fitted curves. plot posterior fits observed expression three genes (converting gene id gene symbol). Next combine observed expression data metadata. curves show limorhyde2 able fit non-sinusoidal rhythms.","code":"genes = data.table(   id = c('13170', '12686', '26897'),   symbol = c('Dbp', 'Elovl3', 'Acot1'))  measFit = getExpectedMeas(fit, times = seq(0, 24, 0.5), features = genes$id) measFit[genes, symbol := i.symbol, on = .(feature = id)] print(measFit, nrows = 10L) #>      time      cond feature     value symbol #>   1:    0 wild-type   13170  9.402594    Dbp #>   2:    0 wild-type   12686 11.848689 Elovl3 #>   3:    0 wild-type   26897 11.551600  Acot1 #>   4:    0  knockout   13170 11.969182    Dbp #>   5:    0  knockout   12686  9.801527 Elovl3 #>  ---                                         #> 290:   24 wild-type   12686 11.848689 Elovl3 #> 291:   24 wild-type   26897 11.551600  Acot1 #> 292:   24  knockout   13170 11.969182    Dbp #> 293:   24  knockout   12686  9.801527 Elovl3 #> 294:   24  knockout   26897  9.142774  Acot1 measObs = mergeMeasMeta(y, metadata, features = genes$id) measObs[genes, symbol := i.symbol, on = .(feature = id)] print(measObs, nrows = 10L) #>        sample      cond time feature      meas symbol #>  1: GSM840504  knockout    0   13170 11.669138    Dbp #>  2: GSM840504  knockout    0   12686  9.705361 Elovl3 #>  3: GSM840504  knockout    0   26897  8.654624  Acot1 #>  4: GSM840505  knockout    0   13170 11.877697    Dbp #>  5: GSM840505  knockout    0   12686  9.611530 Elovl3 #> ---                                                   #> 68: GSM840526 wild-type   20   12686 10.911935 Elovl3 #> 69: GSM840526 wild-type   20   26897 12.486105  Acot1 #> 70: GSM840527 wild-type   20   13170  9.749365    Dbp #> 71: GSM840527 wild-type   20   12686 11.075636 Elovl3 #> 72: GSM840527 wild-type   20   26897 12.352601  Acot1  ggplot() +   facet_wrap(vars(symbol), scales = 'free_y', nrow = 1) +   geom_line(aes(x = time, y = value, color = cond), data = measFit) +   geom_point(aes(x = time %% 24, y = meas, color = cond, shape = cond),              size = 1.5, data = measObs) +   labs(x = 'Zeitgeber time (h)', y = 'Expression (norm.)',        color = 'Condition', shape = 'Condition') +   scale_x_continuous(breaks = seq(0, 24, 4)) +   scale_color_brewer(palette = 'Dark2') +   scale_shape_manual(values = c(21, 23)) +   theme(legend.position = 'bottom')"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantifying rhythmicity in one condition","text":"show use limorhyde2 quantify rhythmicity data one condition. data based mouse liver samples circadian gene expression atlas mammals (GSE54650).","code":""},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Quantifying rhythmicity in one condition","text":"","code":"library('data.table') library('ggplot2') library('limorhyde2') library('qs')  # doParallel::registerDoParallel() # register a parallel backend to minimize runtime theme_set(theme_bw())"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Quantifying rhythmicity in one condition","text":"expression data matrix one row per gene one column per sample. metadata table one row per sample. save time space, expression data include subset genes.","code":"y = GSE54650$y y[1:5, 1:5] #>           GSM1321182 GSM1321183 GSM1321184 GSM1321185 GSM1321186 #> 13088      10.209968  10.503358   9.714828   9.477728  10.134381 #> 13170       7.871989   7.281691   6.946495   6.266409   7.150140 #> 13869       6.851685   7.406234   7.781294   7.924764   8.089538 #> 100009600   5.055931   5.199767   5.121511   5.155912   5.219873 #> 100418030   6.174130   6.547075   6.521593   6.413817   6.451957  metadata = GSE54650$metadata metadata #>         sample tissue time #>  1: GSM1321182  liver   18 #>  2: GSM1321183  liver   20 #>  3: GSM1321184  liver   22 #>  4: GSM1321185  liver   24 #>  5: GSM1321186  liver   26 #>  6: GSM1321187  liver   28 #>  7: GSM1321188  liver   30 #>  8: GSM1321189  liver   32 #>  9: GSM1321190  liver   34 #> 10: GSM1321191  liver   36 #> 11: GSM1321192  liver   38 #> 12: GSM1321193  liver   40 #> 13: GSM1321194  liver   42 #> 14: GSM1321195  liver   44 #> 15: GSM1321196  liver   46 #> 16: GSM1321197  liver   48 #> 17: GSM1321198  liver   50 #> 18: GSM1321199  liver   52 #> 19: GSM1321200  liver   54 #> 20: GSM1321201  liver   56 #> 21: GSM1321202  liver   58 #> 22: GSM1321203  liver   60 #> 23: GSM1321204  liver   62 #> 24: GSM1321205  liver   64 #>         sample tissue time"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"fit-linear-models","dir":"Articles","previous_headings":"","what":"Fit linear models","title":"Quantifying rhythmicity in one condition","text":"first step fit series linear models based periodic splines genomic feature, case gene, using limma. getModelFit() takes several arguments besides expression data metadata, just use defaults. example, data one condition, leave condColname NULL. Also, expression data microarrays already log-transformed, leave method 'trend'.","code":"fit = getModelFit(y, metadata)"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"get-posterior-fits","dir":"Articles","previous_headings":"","what":"Get posterior fits","title":"Quantifying rhythmicity in one condition","text":"next step obtain posterior estimates model coefficients using multivariate adaptive shrinkage (mashr), learns patterns data accounts noise original fits.","code":"fit = getPosteriorFit(fit)"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"get-rhythm-statistics","dir":"Articles","previous_headings":"","what":"Get rhythm statistics","title":"Quantifying rhythmicity in one condition","text":"can now use posterior fits compute rhythm statistics, .e. properties curve, gene. can examine distributions statistics various ways, ranking genes peak--trough amplitude (p-values necessary) plotting peak--trough amplitude vs. peak phase.","code":"rhyStats = getRhythmStats(fit) print(rhyStats[order(-peak_trough_amp)], nrows = 10L) #>       feature peak_phase peak_value trough_phase trough_value peak_trough_amp #>  1:     13170  8.6775145  10.290602    22.346123     6.765579     3.525022206 #>  2:    266645 19.5106275   9.800471     8.768400     8.237576     1.562895177 #>  3:     13088 18.6818895  10.412693     9.015083     8.883997     1.528695535 #>  4:     13869  8.3932348   8.524375    18.785793     7.207670     1.316705132 #>  5:     68396 20.3289764   9.678209     8.714920     8.809740     0.868468524 #> ---                                                                           #> 46: 100009600  2.4406727   5.125981    18.711851     5.124404     0.001577536 #> 47:     12613  0.4067764   5.049751     9.355932     5.048220     0.001530589 #> 48:     14616  0.4067829   5.420731    17.491505     5.419337     0.001394137 #> 49:     23801 16.2711757   5.371221     9.355932     5.370178     0.001043270 #> 50: 115485688 19.9322039   4.235861    11.796608     4.235586     0.000275261 #>        mesor #>  1: 8.478849 #>  2: 9.092471 #>  3: 9.761742 #>  4: 7.853238 #>  5: 9.283828 #> ---          #> 46: 5.125043 #> 47: 5.048960 #> 48: 5.420226 #> 49: 5.370578 #> 50: 4.235683  ggplot(rhyStats) +   geom_point(aes(x = peak_phase, y = peak_trough_amp), alpha = 0.2) +   xlab('Peak phase (h)') +   ylab('Peak-to-trough amplitude (norm.)') +   scale_x_continuous(breaks = seq(0, 24, 4))"},{"path":"https://limorhyde2.hughylab.org/articles/rhythmicity.html","id":"get-observed-and-fitted-time-courses","dir":"Articles","previous_headings":"","what":"Get observed and fitted time-courses","title":"Quantifying rhythmicity in one condition","text":"can also compute expected measurements one genes one time-points, correspond fitted curves. plot posterior fits observed expression three top rhythmic genes (converting gene id gene symbol). Next combine observed expression data metadata. curves show limorhyde2 able fit non-sinusoidal rhythms.","code":"genes = data.table(   id = c('13088', '13170', '13869'),   symbol = c('Cyp2b10', 'Dbp', 'Erbb4'))  measFit = getExpectedMeas(fit, times = seq(0, 24, 0.5), features = genes$id) measFit[genes, symbol := i.symbol, on = .(feature = id)] print(measFit, nrows = 10L) #>      time feature     value  symbol #>   1:  0.0   13088 10.146744 Cyp2b10 #>   2:  0.0   13170  6.949242     Dbp #>   3:  0.0   13869  7.631226   Erbb4 #>   4:  0.5   13088 10.108186 Cyp2b10 #>   5:  0.5   13170  7.081859     Dbp #>  ---                                #> 143: 23.5   13170  6.853361     Dbp #> 144: 23.5   13869  7.570816   Erbb4 #> 145: 24.0   13088 10.146744 Cyp2b10 #> 146: 24.0   13170  6.949242     Dbp #> 147: 24.0   13869  7.631226   Erbb4 measObs = mergeMeasMeta(y, metadata, features = genes$id) measObs[genes, symbol := i.symbol, on = .(feature = id)] print(measObs, nrows = 10L) #>         sample tissue time feature      meas  symbol #>  1: GSM1321182  liver   18   13088 10.209968 Cyp2b10 #>  2: GSM1321182  liver   18   13170  7.871989     Dbp #>  3: GSM1321182  liver   18   13869  6.851685   Erbb4 #>  4: GSM1321183  liver   20   13088 10.503358 Cyp2b10 #>  5: GSM1321183  liver   20   13170  7.281691     Dbp #> ---                                                  #> 68: GSM1321204  liver   62   13170  8.656560     Dbp #> 69: GSM1321204  liver   62   13869  6.970524   Erbb4 #> 70: GSM1321205  liver   64   13088 10.352095 Cyp2b10 #> 71: GSM1321205  liver   64   13170  8.157525     Dbp #> 72: GSM1321205  liver   64   13869  7.048457   Erbb4  ggplot() +   facet_wrap(vars(symbol), scales = 'free_y', nrow = 1) +   geom_line(aes(x = time, y = value), data = measFit) +   geom_point(aes(x = time %% 24, y = meas), shape = 21, size = 1.5,              data = measObs) +   labs(x = 'Circadian time (h)', y = 'Expression (norm.)') +   scale_x_continuous(breaks = seq(0, 24, 4))"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing RNA-seq data","text":"show two options using limorhyde2 analyze RNA-seq data: limma-voom DESeq2. two approaches give similar results. vignette assumes starting output tximport.","code":""},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Analyzing RNA-seq data","text":"need two objects: txi, list tximport metadata, data.frame one row per sample rows metadata must correspond columns elements txi.","code":"library('limorhyde2') # txi = ? # metadata = ?"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"filter-out-lowly-expressed-genes","dir":"Articles","previous_headings":"","what":"Filter out lowly expressed genes","title":"Analyzing RNA-seq data","text":"many reasonable strategies , one.","code":"keep = rowSums(edgeR::cpm(txi$counts) >= 0.5) / ncol(txi$counts) >= 0.75  txiKeep = txi for (name in c('counts', 'length')) {   txiKeep[[name]] = txi[[name]][keep, ]}"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"fill-in-counts-for-sample-gene-pairs-having-zero-counts","dir":"Articles","previous_headings":"","what":"Fill in counts for sample-gene pairs having zero counts","title":"Analyzing RNA-seq data","text":"avoids unrealistically low log2 CPM values thus artificially inflated effect size estimates.","code":"for (i in seq_len(nrow(txiKeep$counts))) {   idx = txiKeep$counts[i, ] > 0   txiKeep$counts[i, !idx] = min(txiKeep$counts[i, idx])}"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"option-1-limma-voom","dir":"Articles","previous_headings":"","what":"Option 1: limma-voom","title":"Analyzing RNA-seq data","text":"","code":"y = edgeR::DGEList(txiKeep$counts) y = edgeR::calcNormFactors(y)  fit = getModelFit(y, metadata, ..., method = 'voom') # replace '...' as appropriate for your data"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"option-2-deseq2","dir":"Articles","previous_headings":"","what":"Option 2: DESeq2","title":"Analyzing RNA-seq data","text":"second third arguments DESeqDataSetFromTxImport() required, used limorhyde2.","code":"y = DESeq2::DESeqDataSetFromTximport(txiKeep, metadata, ~1)  fit = getModelFit(y, metadata, ..., method = 'deseq2') # replace '...' as appropriate for your data"},{"path":"https://limorhyde2.hughylab.org/articles/rnaseq.html","id":"continue-using-limorhyde2","dir":"Articles","previous_headings":"","what":"Continue using limorhyde2","title":"Analyzing RNA-seq data","text":"Regardless option choose, next steps : getPosteriorFit(), getRhythmStats(), etc.","code":""},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantifying uncertainty in (differential) rhythmicity","text":"show use limorhyde2 quantify uncertainty rhythmicity differential rhythmicity. step essential can computationally expensive, can provide additional information. limorhyde2 Bayesian approach focused effect sizes rather statistical significance, quantifying uncertainty relies concepts posterior probability credible intervals. data based liver samples wild-type Rev-erb\\(\\alpha/\\beta\\) double-knockout mice (Cho et al. 2012 GSE34018).","code":""},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Quantifying uncertainty in (differential) rhythmicity","text":"","code":"library('cowplot') library('data.table') library('ggplot2') library('limorhyde2') library('qs')  # doParallel::registerDoParallel() # register a parallel backend to minimize runtime theme_set(theme_bw())"},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Quantifying uncertainty in (differential) rhythmicity","text":"expression data matrix one row per gene one column per sample. metadata table one row per sample. save time space, expression data include subset genes.","code":"y = GSE34018$y y[1:5, 1:5] #>       GSM840516 GSM840517 GSM840518 GSM840519 GSM840520 #> 12686 11.962830 11.923338 11.098814 10.958933  9.256413 #> 13170  8.989743  9.132606 12.381036 12.441759 14.766070 #> 26897 11.515292 11.625519 10.579969 10.601969 11.096489 #> 11287  7.985859  7.930935  7.674688  7.899531  7.768563 #> 12046  8.024084  7.856703  7.942198  8.172695  7.981340  metadata = GSE34018$metadata metadata #>        sample      cond time #>  1: GSM840516 wild-type    0 #>  2: GSM840517 wild-type    0 #>  3: GSM840518 wild-type    4 #>  4: GSM840519 wild-type    4 #>  5: GSM840520 wild-type    8 #>  6: GSM840521 wild-type    8 #>  7: GSM840522 wild-type   12 #>  8: GSM840523 wild-type   12 #>  9: GSM840524 wild-type   16 #> 10: GSM840525 wild-type   16 #> 11: GSM840526 wild-type   20 #> 12: GSM840527 wild-type   20 #> 13: GSM840504  knockout    0 #> 14: GSM840505  knockout    0 #> 15: GSM840506  knockout    4 #> 16: GSM840507  knockout    4 #> 17: GSM840508  knockout    8 #> 18: GSM840509  knockout    8 #> 19: GSM840510  knockout   12 #> 20: GSM840511  knockout   12 #> 21: GSM840512  knockout   16 #> 22: GSM840513  knockout   16 #> 23: GSM840514  knockout   20 #> 24: GSM840515  knockout   20 #>        sample      cond time"},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"fit-linear-models-and-compute-posterior-fits","dir":"Articles","previous_headings":"","what":"Fit linear models and compute posterior fits","title":"Quantifying uncertainty in (differential) rhythmicity","text":"samples acquired relatively low temporal resolution (every 4 h), use three knots instead default four, reduces flexibility spline curves. specify condColname getModelFit() knows fit differential rhythmicity model.","code":"fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit)"},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"draw-samples-from-the-posterior-fits","dir":"Articles","previous_headings":"","what":"Draw samples from the posterior fits","title":"Quantifying uncertainty in (differential) rhythmicity","text":"posterior fits consist just single set model coefficients (posterior means), distributions model coefficients. Sampling distributions first step quantifying uncertainty fits. generate 50 posterior samples, although actual analysis require accurately estimate credible intervals.","code":"fit = getPosteriorSamples(fit, nPosteriorSamples = 50L)"},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"get-fitted-time-courses","dir":"Articles","previous_headings":"","what":"Get fitted time-courses","title":"Quantifying uncertainty in (differential) rhythmicity","text":"can use posterior samples quantify uncertainty expected measurements, .e., fitted curves, specifying fitType argument. focus three genes. Given expected measurements posterior samples, can compute lower upper bounds credible interval combination feature, condition, time-point. default, getExpectedMeasIntervals() calculates 90% equal-tailed interval. ’s always good idea also calculate posterior mean fitted curves. Now can plot results. first row, curve corresponds posterior sample. second row, ribbons indicate credible intervals.","code":"genes = data.table(   id = c('13170', '12686', '26897'),   symbol = c('Dbp', 'Elovl3', 'Acot1')) times = seq(0, 24, 0.5)  measFitSamps = getExpectedMeas(   fit, times = times, fitType = 'posterior_samples', features = genes$id) measFitSamps[genes, symbol := i.symbol, on = .(feature = id)] print(measFitSamps, nrows = 10L) #>        time      cond feature     value posterior_sample symbol #>     1:    0 wild-type   13170  9.274814                1    Dbp #>     2:    0 wild-type   12686 11.863308                1 Elovl3 #>     3:    0 wild-type   26897 11.566155                1  Acot1 #>     4:    0  knockout   13170 11.906920                1    Dbp #>     5:    0  knockout   12686  9.816829                1 Elovl3 #>    ---                                                          #> 14696:   24 wild-type   12686 11.824787               50 Elovl3 #> 14697:   24 wild-type   26897 11.662587               50  Acot1 #> 14698:   24  knockout   13170 11.843255               50    Dbp #> 14699:   24  knockout   12686  9.893764               50 Elovl3 #> 14700:   24  knockout   26897  9.105940               50  Acot1 measFitInts = getExpectedMeasIntervals(measFitSamps) print(measFitInts, nrows = 10L) #>      time      cond feature symbol     lower     upper #>   1:    0 wild-type   13170    Dbp  9.233404  9.565491 #>   2:    0 wild-type   12686 Elovl3 11.709998 11.951344 #>   3:    0 wild-type   26897  Acot1 11.422795 11.675348 #>   4:    0  knockout   13170    Dbp 11.794823 12.124659 #>   5:    0  knockout   12686 Elovl3  9.707732  9.927886 #>  ---                                                   #> 290:   24 wild-type   12686 Elovl3 11.709998 11.951344 #> 291:   24 wild-type   26897  Acot1 11.422795 11.675348 #> 292:   24  knockout   13170    Dbp 11.794823 12.124659 #> 293:   24  knockout   12686 Elovl3  9.707732  9.927886 #> 294:   24  knockout   26897  Acot1  9.008638  9.233237 measFitMean = getExpectedMeas(fit, times = times, features = genes$id) measFitMean[genes, symbol := i.symbol, on = .(feature = id)] timeBreaks = seq(0, 24, 4) pal = 'Dark2'  p1 = ggplot(measFitSamps) +   facet_wrap(vars(symbol), scales = 'fixed', nrow = 1) +   geom_line(aes(x = time, y = value, color = cond,                 group = interaction(cond, posterior_sample)), alpha = 0.2) +   labs(x = 'Circadian time (h)', y = 'Expression (norm.)', color = 'Condition') +   scale_x_continuous(breaks = timeBreaks) +   scale_color_brewer(palette = pal) +   theme(legend.position = 'none')  p2 = ggplot() +   facet_wrap(vars(symbol), scales = 'fixed', nrow = 1) +   geom_ribbon(aes(x = time, ymin = lower, ymax = upper, fill = cond),               alpha = 0.3, data = measFitInts) +   geom_line(aes(x = time, y = value, color = cond), data = measFitMean) +   labs(x = 'Circadian time (h)', y = 'Expression (norm.)', color = 'Condition',        fill = 'Condition') +   scale_x_continuous(breaks = timeBreaks) +   scale_fill_brewer(palette = pal) +   scale_color_brewer(palette = pal) +   theme(legend.position = 'bottom')  plot_grid(p1, p2, ncol = 1, rel_heights = c(1, 1.25))"},{"path":"https://limorhyde2.hughylab.org/articles/uncertainty.html","id":"get-rhythm-and-differential-rhythm-statistics","dir":"Articles","previous_headings":"","what":"Get rhythm and differential rhythm statistics","title":"Quantifying uncertainty in (differential) rhythmicity","text":"can also use posterior samples quantify uncertainty statistics, specifying fitType argument. plots , point represents posterior sample.  Finally, can compute credible intervals rhythm differential rhythm statistics. , default 90% equal-tailed intervals. Currently getStatsIntervals() calculate intervals phase-based statistics, since phase phase difference circular quantities.","code":"rhyStatsSamps = getRhythmStats(fit, features = genes$id, fitType = 'posterior_samples') diffRhyStatsSamps = getDiffRhythmStats(fit, rhyStatsSamps) diffRhyStatsSamps[genes, symbol := i.symbol, on = .(feature = id)] print(diffRhyStatsSamps, nrows = 10L) #>      feature posterior_sample     cond1    cond2 mean_mesor #>   1:   12686                1 wild-type knockout   10.15766 #>   2:   12686                2 wild-type knockout   10.15766 #>   3:   12686                3 wild-type knockout   10.15766 #>   4:   12686                4 wild-type knockout   10.15766 #>   5:   12686                5 wild-type knockout   10.15766 #>  ---                                                        #> 146:   26897               46 wild-type knockout   10.47346 #> 147:   26897               47 wild-type knockout   10.47346 #> 148:   26897               48 wild-type knockout   10.47346 #> 149:   26897               49 wild-type knockout   10.47346 #> 150:   26897               50 wild-type knockout   10.47346 #>      mean_peak_trough_amp diff_mesor diff_peak_trough_amp diff_peak_phase #>   1:            1.7633818 -0.4215416           -2.6201893      -5.6887563 #>   2:            1.5702244 -0.4215416           -2.1313997      -6.1659571 #>   3:            1.7466211 -0.4215416           -2.5481985      -5.9954759 #>   4:            1.8630660 -0.4215416           -2.5796118      -5.6400564 #>   5:            1.7071846 -0.4215416           -2.4134397      -6.7763651 #>  ---                                                                      #> 146:            1.1597560 -2.4048158           -1.5707881       0.2460203 #> 147:            0.9817103 -2.4048158           -0.8025853      -0.7843197 #> 148:            0.9179664 -2.4048158           -1.2098345      -1.1798541 #> 149:            0.8594796 -2.4048158           -0.9957860      -0.1180031 #> 150:            1.0290923 -2.4048158           -1.1370100      -2.2364984 #>      diff_trough_phase diff_rhy_dist symbol #>   1:        0.82009394     3.0700062 Elovl3 #>   2:       -0.06900037     2.7052109 Elovl3 #>   3:        0.33848327     3.0569016 Elovl3 #>   4:       -0.14269700     3.1510468 Elovl3 #>   5:       -9.81410512     3.0545110 Elovl3 #>  ---                                        #> 146:        6.78635282     1.5717491  Acot1 #> 147:       -2.94075970     0.8233279  Acot1 #> 148:       -3.24661986     1.2283422  Acot1 #> 149:        7.04463249     0.9960211  Acot1 #> 150:       -3.59999383     1.2401330  Acot1 p1 = ggplot(diffRhyStatsSamps) +   facet_wrap(vars(symbol), nrow = 1) +   geom_point(aes(x = diff_peak_trough_amp, y = diff_mesor), alpha = 0.2) +   labs(x = bquote(Delta * 'amplitude (norm.)'), y = bquote(Delta * 'mesor (norm.)'))  p2 = ggplot(diffRhyStatsSamps) +   facet_wrap(vars(symbol), nrow = 1) +   geom_point(aes(x = diff_peak_trough_amp, y = diff_peak_phase), alpha = 0.2) +   labs(x = bquote(Delta * 'amplitude (norm.)'), y = bquote(Delta * 'phase (h)'))  plot_grid(p1, p2, ncol = 1) rhyStatsInts = getStatsIntervals(rhyStatsSamps) print(rhyStatsInts, nrows = 10L) #>          cond feature       statistic      lower      upper #>  1: wild-type   13170      peak_value 14.8875425 15.2247879 #>  2: wild-type   12686      peak_value 11.7122222 11.9527091 #>  3: wild-type   26897      peak_value 12.2431434 12.6095792 #>  4:  knockout   13170      peak_value 14.1446489 14.4666946 #>  5:  knockout   12686      peak_value 10.1660549 10.4678090 #> ---                                                         #> 14: wild-type   12686 peak_trough_amp  2.7583816  3.1961593 #> 15: wild-type   26897 peak_trough_amp  1.3165677  2.0820149 #> 16:  knockout   13170 peak_trough_amp  2.3338840  2.8714960 #> 17:  knockout   12686 peak_trough_amp  0.4053327  0.8133666 #> 18:  knockout   26897 peak_trough_amp  0.2871294  0.7179791  diffRhyStatsInts = getStatsIntervals(diffRhyStatsSamps) print(diffRhyStatsInts, nrows = 10L) #>        cond1    cond2 feature            statistic      lower      upper #> 1: wild-type knockout   12686           diff_mesor -0.4215416 -0.4215416 #> 2: wild-type knockout   13170           diff_mesor  1.1950262  1.1950262 #> 3: wild-type knockout   26897           diff_mesor -2.4048158 -2.4048158 #> 4: wild-type knockout   12686 diff_peak_trough_amp -2.7171127 -2.1598489 #> 5: wild-type knockout   13170 diff_peak_trough_amp -3.8854777 -2.9242634 #> 6: wild-type knockout   26897 diff_peak_trough_amp -1.6016674 -0.7528489"},{"path":"https://limorhyde2.hughylab.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Hughey. Author, maintainer. Dora Obodo. Author. Elliot Outland. Author.","code":""},{"path":"https://limorhyde2.hughylab.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hughey J, Obodo D, Outland E (2022). limorhyde2: Quantify Rhythmicity Differential Rhythmicity Genomic Data. https://limorhyde2.hugheylab.org, https://github.com/hugheylab/limorhyde2.","code":"@Manual{,   title = {limorhyde2: Quantify Rhythmicity and Differential Rhythmicity in Genomic Data},   author = {Jake Hughey and Dora Obodo and Elliot Outland},   year = {2022},   note = {https://limorhyde2.hugheylab.org, https://github.com/hugheylab/limorhyde2}, }"},{"path":"https://limorhyde2.hughylab.org/index.html","id":"limorhyde2","dir":"","previous_headings":"","what":"Quantify Rhythmicity and Differential Rhythmicity in Genomic Data","title":"Quantify Rhythmicity and Differential Rhythmicity in Genomic Data","text":"limorhyde2 approach analyze rhythmic, genome-scale data way focuses effect sizes. detailed description limorhyde2 along examples showing utility data one conditions, please wait preprint.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/index.html","id":"option-1-cran","dir":"","previous_headings":"Installation","what":"Option 1: CRAN","title":"Quantify Rhythmicity and Differential Rhythmicity in Genomic Data","text":"","code":"if (!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install(c('DESeq2', 'limma')) install.packages('limorhyde2')"},{"path":"https://limorhyde2.hughylab.org/index.html","id":"option-2-hughey-lab-drat-repository","dir":"","previous_headings":"Installation","what":"Option 2: Hughey Lab Drat Repository","title":"Quantify Rhythmicity and Differential Rhythmicity in Genomic Data","text":"Install BiocManager. use RStudio, go Tools → Global Options… → Packages → Add… (Secondary repositories), enter: Name: hugheylab Url: https://hugheylab.github.io/drat/ . can install update package entering: Alternatively, can install update package entering:","code":"if (!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager') BiocManager::install('limorhyde2') BiocManager::install('limorhyde2', site_repository = 'https://hugheylab.github.io/drat/')"},{"path":"https://limorhyde2.hughylab.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Quantify Rhythmicity and Differential Rhythmicity in Genomic Data","text":"See examples detailed guidance reference documentation.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/GSE34018.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene expression data for GSE34018 — GSE34018","title":"Gene expression data for GSE34018 — GSE34018","text":"Data based total RNA, measured microarray, obtained livers wild-type liver-specific Reverb alpha/beta double knockout mice various times 12h:12h light:dark cycle. save space time, data include subset genes, mainly useful examples use limorhyde2.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/GSE34018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene expression data for GSE34018 — GSE34018","text":"","code":"GSE34018"},{"path":"https://limorhyde2.hughylab.org/reference/GSE34018.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene expression data for GSE34018 — GSE34018","text":"list two elements: y: Matrix normalized, log-transformed expression values. Rows correspond genes (rownames Entrez Gene IDs) columns samples. metadata: data.table one row per sample. time hours.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/GSE34018.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene expression data for GSE34018 — GSE34018","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE34018","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/GSE54650.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene expression data for GSE54650 — GSE54650","title":"Gene expression data for GSE54650 — GSE54650","text":"Data based total RNA, measured microarray, obtained livers wild-type mice various times transfer constant darkness. save space time, data include subset genes, mainly useful examples use limorhyde2.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/GSE54650.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene expression data for GSE54650 — GSE54650","text":"","code":"GSE54650"},{"path":"https://limorhyde2.hughylab.org/reference/GSE54650.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene expression data for GSE54650 — GSE54650","text":"list two elements: y: Matrix normalized, log-transformed expression values. Rows correspond genes (rownames Entrez Gene IDs) columns samples. metadata: data.table one row per sample. time hours.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/GSE54650.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gene expression data for GSE54650 — GSE54650","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE54650","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getDiffRhythmStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","title":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","text":"function computes differences rhythmicity fitted curves given pair conditions.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getDiffRhythmStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","text":"","code":"getDiffRhythmStats(fit, rhyStats, conds = fit$conds, dopar = TRUE)"},{"path":"https://limorhyde2.hughylab.org/reference/getDiffRhythmStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","text":"fit limorhyde2 object containing data multiple conditions. rhyStats data.table rhythmic statistics, returned getRhythmStats(), fitted models fit. conds character vector indicating conditions compare pairwise, default conditions fit. dopar Logical indicating whether run calculations parallel parallel backend already set , e.g., using doParallel::registerDoParallel(). Recommended minimize runtime.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getDiffRhythmStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","text":"data.table containing following differential rhythm statistics: mean_mesor mean_peak_trough_amp mean_rms_amp (calculated rms getRhythmStats() TRUE) diff_mesor diff_peak_trough_amp diff_rms_amp (calculated rms getRhythmStats() TRUE) diff_peak_phase: circular difference -fit$period/2 fit$period/2 diff_trough_phase: circular difference -fit$period/2 fit$period/2 diff_rhy_dist: Euclidean distance polar coordinates (peak_trough_amp, peak_phase) rms_diff_rhy: root mean square difference mean-centered fitted curves (calculated rms getRhythmStats() TRUE) stats based value cond2 minus value cond1. rows data.table depend 'fitType' attribute rhyStats: 'fitType' 'posterior_mean' 'raw': one row per feature per pair conditions. 'fitType' 'posterior_samples': one row per feature per posterior sample per pair conditions.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getDiffRhythmStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute differential rhythm statistics from fitted models — getDiffRhythmStats","text":"","code":"library('data.table')  # rhythmicity in one condition y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '13869'))  # rhythmicity and differential rhythmicity in multiple conditions y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '12686')) diffRhyStats = getDiffRhythmStats(fit, rhyStats)"},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeas.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expected measurements from fitted models — getExpectedMeas","title":"Compute expected measurements from fitted models — getExpectedMeas","text":"function computes expected measurements (corresponding fitted curves) specified times features combinations conditions covariates (exist).","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expected measurements from fitted models — getExpectedMeas","text":"","code":"getExpectedMeas(   fit,   times,   fitType = c(\"posterior_mean\", \"posterior_samples\", \"raw\"),   features = NULL,   dopar = TRUE )"},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expected measurements from fitted models — getExpectedMeas","text":"fit 'limorhyde2' object. times Numeric vector times, units fit$metadata[[fit$timeColname]]. fitType String indicating fitted models use compute expected measurements. typical analysis using limorhyde2 based 'posterior_mean', default. features Vector names, row numbers, logical values subsetting features. NULL indicates features. dopar Logical indicating whether run calculations parallel parallel backend already set , e.g., using doParallel::registerDoParallel(). Recommended minimize runtime.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expected measurements from fitted models — getExpectedMeas","text":"data.table.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute expected measurements from fitted models — getExpectedMeas","text":"","code":"library('data.table')  y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit)  measObs = mergeMeasMeta(y, metadata, features = c('13170', '12686')) measFitMean = getExpectedMeas(   fit, times = seq(0, 24, 0.5), features = c('13170', '12686'))"},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeasIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","title":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","text":"functions uses posterior samples quantify uncertainty expected measurements fitted models.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeasIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","text":"","code":"getExpectedMeasIntervals(expectedMeas, mass = 0.95, method = c(\"eti\", \"hdi\"))"},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeasIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","text":"expectedMeas data.table expected measurements posterior samples, returned getExpectedMeas(). mass Number 0 1 indicating probability mass calculate intervals. method String indicating type interval: 'eti' equal-tailed using stats::quantile(), 'hdi' highest density using HDInterval::hdi().","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeasIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","text":"data.table containing lower upper bounds expected measurement combination feature, time, possibly condition covariate.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getExpectedMeasIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute credible intervals for expected measurements — getExpectedMeasIntervals","text":"","code":"library('data.table')  y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) fit = getPosteriorSamples(fit, nPosteriorSamples = 10L)  measFitSamps = getExpectedMeas(   fit, times = seq(0, 24, 0.5), fitType = 'posterior_samples',   features = c('13170', '12686')) measFitInts = getExpectedMeasIntervals(measFitSamps)"},{"path":"https://limorhyde2.hughylab.org/reference/getModelFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear models for rhythmicity in one or more conditions — getModelFit","title":"Fit linear models for rhythmicity in one or more conditions — getModelFit","text":"first step analysis using limorhyde2, second moderate fits using getPosteriorFit().","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getModelFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear models for rhythmicity in one or more conditions — getModelFit","text":"","code":"getModelFit(   y,   metadata,   period = 24,   nKnots = 3L,   degree = if (nKnots > 2) 3L else 2L,   sinusoid = FALSE,   timeColname = \"time\",   condColname = NULL,   covarColnames = NULL,   sampleColname = \"sample\",   nShifts = 3L,   method = c(\"trend\", \"voom\", \"deseq2\"),   lmFitArgs = list(),   eBayesArgs = if (method == \"trend\") list(trend = TRUE) else list(),   DESeqArgs = list(),   keepLmFits = FALSE )"},{"path":"https://limorhyde2.hughylab.org/reference/getModelFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear models for rhythmicity in one or more conditions — getModelFit","text":"y Matrix-like object measurements, rows corresponding features columns samples. metadata data.frame containing experimental design information sample. Rows metadata must correspond columns y. Row names ignored. period Number specifying period time variable, units values timeColname column. nKnots Number internal knots periodic spline time variable. degree Integer indicating degree piecewise polynomial spline. sinusoid Logical indicating whether fit cosinor-based model instead spline-based model. timeColname String indicating column metadata containing time sample acquired. condColname String indicating column metadata containing condition sample acquired. NULL indicates samples came condition. NULL, model include main effects interactions terms time. covarColnames Character vector indicating columns metadata containing covariates include model. NULL indicates covariates. sampleColname String indicating column metadata containing name sample, must correspond column names y. nShifts Number shifted models fit. used periodic splines, cosinor. change default unless know . method String indicating method estimate model coefficients. microarray data, use 'trend'. RNA-seq count data, use 'voom' 'deseq2'. lmFitArgs List arguments passed limma::lmFit(). eBayesArgs List arguments passed limma::eBayes(). DESeqArgs List arguments passed DESeq2::DESeq(). keepLmFits Logical indicating whether keep complete fit objects limma DESeq2. needed functions limorhyde2.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getModelFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear models for rhythmicity in one or more conditions — getModelFit","text":"limorhyde2 object elements: metadata: supplied , converted data.table. timeColname: supplied . condColname: supplied . covarColnames: supplied . coefficients: Matrix rows corresponding features columns model terms, including shifted models. shifts: Numeric vector indicating amount timepoints shifted shifted model. period: supplied . conds: condColname NULL, vector unique values condition variable. nKnots: Number knots. degree: supplied . sinusoid: supplied . nConds: Number conditions. nCovs: Number covariates. lmFits: keepLmFits TRUE, list objects limma DESeq2, length equal length shifts element.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getModelFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit linear models for rhythmicity in one or more conditions — getModelFit","text":"","code":"library('data.table')  # rhythmicity in one condition y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '13869'))  # rhythmicity and differential rhythmicity in multiple conditions y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '12686')) diffRhyStats = getDiffRhythmStats(fit, rhyStats)"},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","title":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","text":"second step analysis using limorhyde2, first fit linear models using getModelFit(). function obtains posterior estimates coefficients using multivariate adaptive shrinkage (mash), learns patterns data accounts noise original fits. defaults arguments work well cases, change know .","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","text":"","code":"getPosteriorFit(   fit,   covMethod = c(\"data-driven\", \"canonical\", \"both\"),   getSigResArgs = list(),   npc = fit$nKnots,   covEdArgs = list(),   overwrite = FALSE,   ... )"},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","text":"fit limorhyde2 object. covMethod String indicating type(s) covariance matrices use mash fit. getSigResArgs List arguments passed mashr::get_significant_results(). used covMethod 'data-driven' ''. npc Number principal components passed mashr::cov_pca(). used covMethod 'data-driven' ''. covEdArgs List arguments passed mashr::cov_ed(). used covMethod 'data-driven' ''. overwrite Logical whether recompute mash fit already exists. ... Additional arguments passed mashr::mash().","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","text":"limorhyde2 object containing everything fit added updated elements: mashData: list mash data objects mashFits: list mash fit objects mashCoefficients: Matrix posterior mean coefficients, rows corresponding features columns model terms. mashIdx: Vector indicating model terms included mash fit.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute posterior fit for linear models for rhythmicity — getPosteriorFit","text":"","code":"library('data.table')  # rhythmicity in one condition y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '13869'))  # rhythmicity and differential rhythmicity in multiple conditions y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '12686')) diffRhyStats = getDiffRhythmStats(fit, rhyStats)"},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","title":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","text":"optional step analysis using limorhyde2, useful quantifying uncertainty posterior estimates fitted curves rhythmic statistics. function calls mashr::mash_compute_posterior_matrices().","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","text":"","code":"getPosteriorSamples(fit, nPosteriorSamples = 200L, overwrite = FALSE)"},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","text":"fit `limorhyde2' object containing posterior fits. nPosteriorSamples Number samples draw posterior distribution. overwrite Logical indicating whether recompute posterior samples already exist.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","text":"limorhyde2 object containing everything fit added updated element: mashPosteriorSamples: three-dimensional array coefficients, dim 1 corresponding features, dim 2 model terms, dim 3 posterior samples.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getPosteriorSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw samples from posterior distributions of fitted models — getPosteriorSamples","text":"","code":"library('data.table')  y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) fit = getPosteriorSamples(fit, nPosteriorSamples = 10L)  rhyStatsSamps = getRhythmStats(   fit, features = c('13170', '13869'), fitType = 'posterior_samples') rhyStatsInts = getStatsIntervals(rhyStatsSamps)"},{"path":"https://limorhyde2.hughylab.org/reference/getRhythmStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute rhythm statistics from fitted models — getRhythmStats","title":"Compute rhythm statistics from fitted models — getRhythmStats","text":"function uses stats::optim() compute various properties fitted curves respect time, potentially condition posterior sample, adjusting covariates.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getRhythmStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute rhythm statistics from fitted models — getRhythmStats","text":"","code":"getRhythmStats(   fit,   fitType = c(\"posterior_mean\", \"posterior_samples\", \"raw\"),   features = NULL,   dopar = TRUE,   rms = FALSE )"},{"path":"https://limorhyde2.hughylab.org/reference/getRhythmStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute rhythm statistics from fitted models — getRhythmStats","text":"fit limorhyde2 object. fitType String indicating fitted models use compute rhythmic statistics. typical analysis using limorhyde2 based 'posterior_mean', default. features Vector names, row numbers, logical values subsetting features. NULL indicates features. dopar Logical indicating whether run calculations parallel parallel backend already set , e.g., using doParallel::registerDoParallel(). Recommended minimize runtime. rms Logical indicating whether calculate rms_amp.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getRhythmStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute rhythm statistics from fitted models — getRhythmStats","text":"data.table containing following rhythm statistics: peak_phase: time 0 fit$period peak maximum value occurs peak_value trough_phase: time 0 fit$period trough minimum value occurs trough_value peak_trough_amp: peak_value - trough_value rms_amp: root mean square difference fitted curve mean value time 0 fit$period (calculated rms TRUE) mesor: mean value time 0 fit$period rows data.table depend fit object fitType: fit contains data one condition fitType posterior_mean' 'raw': one row per feature. fit contains data one condition fitType 'posterior_samples': one row per feature per posterior sample. fit contains data multiple conditions fitType 'posterior_mean' 'raw': one row per feature per condition. fit contains data multiple conditions fitType 'posterior_samples': one row per feature per condition per posterior sample.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getRhythmStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute rhythm statistics from fitted models — getRhythmStats","text":"","code":"library('data.table')  # rhythmicity in one condition y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '13869'))  # rhythmicity and differential rhythmicity in multiple conditions y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata, nKnots = 3L, condColname = 'cond') fit = getPosteriorFit(fit) rhyStats = getRhythmStats(fit, features = c('13170', '12686')) diffRhyStats = getDiffRhythmStats(fit, rhyStats)"},{"path":"https://limorhyde2.hughylab.org/reference/getStatsIntervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","title":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","text":"function uses posterior samples quantify uncertainty properties fitted curves.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getStatsIntervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","text":"","code":"getStatsIntervals(posteriorStats, mass = 0.95, method = c(\"eti\", \"hdi\"))"},{"path":"https://limorhyde2.hughylab.org/reference/getStatsIntervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","text":"posteriorStats data.table statistics posterior samples, returned getRhythmStats() getDiffRhythmStats(). mass Number 0 1 indicating probability mass calculate intervals. method String indicating type interval: 'eti' equal-tailed using stats::quantile(), 'hdi' highest density using HDInterval::hdi().","code":""},{"path":"https://limorhyde2.hughylab.org/reference/getStatsIntervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","text":"data.table containing lower upper bounds various statistics feature feature-condition pair. peak_trough_amp rms_amp, negative lower bound indicates rhythm opposite phase.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/getStatsIntervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute credible intervals for rhythm or differential rhythm statistics — getStatsIntervals","text":"","code":"library('data.table')  y = GSE54650$y metadata = GSE54650$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit) fit = getPosteriorSamples(fit, nPosteriorSamples = 10L)  rhyStatsSamps = getRhythmStats(   fit, features = c('13170', '13869'), fitType = 'posterior_samples') rhyStatsInts = getStatsIntervals(rhyStatsSamps)"},{"path":"https://limorhyde2.hughylab.org/reference/mergeMeasMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge measurements and metadata — mergeMeasMeta","title":"Merge measurements and metadata — mergeMeasMeta","text":"function useful plotting time-courses individual features.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/mergeMeasMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge measurements and metadata — mergeMeasMeta","text":"","code":"mergeMeasMeta(y, metadata, features = NULL, sampleColname = \"sample\")"},{"path":"https://limorhyde2.hughylab.org/reference/mergeMeasMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge measurements and metadata — mergeMeasMeta","text":"y Matrix-like object measurements, rows corresponding features columns samples. metadata data.frame containing experimental design information sample. Rows metadata must correspond columns y. Row names ignored. features Vector names, row numbers, logical values subsetting features. NULL indicates features. sampleColname String indicating column metadata containing name sample, must correspond column names y.","code":""},{"path":"https://limorhyde2.hughylab.org/reference/mergeMeasMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge measurements and metadata — mergeMeasMeta","text":"data.table one row sample-feature pair.","code":""},{"path":[]},{"path":"https://limorhyde2.hughylab.org/reference/mergeMeasMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge measurements and metadata — mergeMeasMeta","text":"","code":"library('data.table')  y = GSE34018$y metadata = GSE34018$metadata  fit = getModelFit(y, metadata) fit = getPosteriorFit(fit)  measObs = mergeMeasMeta(y, metadata, features = c('13170', '12686')) measFitMean = getExpectedMeas(   fit, times = seq(0, 24, 0.5), features = c('13170', '12686'))"},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0012","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.12","title":"limorhyde2 0.0.12","text":"Added isAlreadyInParallel() function checks already running something parallel. Added check getRhythmStats() prevent running parallel already parallel.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0011","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.11","title":"limorhyde2 0.0.11","text":"Fixed mergeMeasMeta() RNA-seq data.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0010","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.10","title":"limorhyde2 0.0.10","text":"Matched styling lab standards.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-009","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.9","title":"limorhyde2 0.0.9","text":"Enabled spline fit fewer knots customizable degree.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-008","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.8","title":"limorhyde2 0.0.8","text":"Matched style lab standard.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-007","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.7","title":"limorhyde2 0.0.7","text":"CRAN release: 2022-03-08 Made data smaller examples faster.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-006","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.6","title":"limorhyde2 0.0.6","text":"Switched using updated ashr CRAN.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-004","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.4","title":"limorhyde2 0.0.4","text":"Added stringent checking correspondence measurements matrix metadata.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-003","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.3","title":"limorhyde2 0.0.3","text":"Made mash silent. Added checking parallel backend, avoid warning messages.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-002","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.2","title":"limorhyde2 0.0.2","text":"Moved data data/, make examples vignettes simpler. Added examples.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-001","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.1","title":"limorhyde2 0.0.1","text":"Updated vignette analyzing RNA-seq data.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009033","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9033","title":"limorhyde2 0.0.0.9033","text":"Renamed mean_value mesor added differential rhythm statistics mean mesor mean amp.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009032","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9032","title":"limorhyde2 0.0.0.9032","text":"Added differential rhythm statistic diff_rhy_dist.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009031","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9031","title":"limorhyde2 0.0.0.9031","text":"Cleaned calculation credible intervals rhythm amplitudes.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009030","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9030","title":"limorhyde2 0.0.0.9030","text":"Updated model parameterization mashing treat conditions fairly.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009029","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9029","title":"limorhyde2 0.0.0.9029","text":"Updated calculation credible intervals rhythm amplitudes.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009028","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9028","title":"limorhyde2 0.0.0.9028","text":"Added vignette RNA-seq data.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009027","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9027","title":"limorhyde2 0.0.0.9027","text":"Added ability fit models using DESeq2.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009026","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9026","title":"limorhyde2 0.0.0.9026","text":"Made calculation rms-based stats optional. Simplified tests use snapshotting.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009025","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9025","title":"limorhyde2 0.0.0.9025","text":"Changed assertLogical() assertFlag() checking inputs.","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009024","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9024","title":"limorhyde2 0.0.0.9024","text":"Fixed vignette building Windows machines","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009023","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9023","title":"limorhyde2 0.0.0.9023","text":"Fixed factor weirdness R versions","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009022","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9022","title":"limorhyde2 0.0.0.9022","text":"Output getDiffRhythmStats() now includes pairs conditions default","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009021","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9021","title":"limorhyde2 0.0.0.9021","text":"Fixed bug getDiffRhythmStats uses shifted models","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009020","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9020","title":"limorhyde2 0.0.0.9020","text":"Replaced globalVariables() assigning variables NULL function","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009019","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9019","title":"limorhyde2 0.0.0.9019","text":"Clarified wording vignettes","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009018","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9018","title":"limorhyde2 0.0.0.9018","text":"Added function merge measurements metadata Added vignettes","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009017","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9017","title":"limorhyde2 0.0.0.9017","text":"Fixed bug getStatsIntervals","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009016","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9016","title":"limorhyde2 0.0.0.9016","text":"Cleaned logic around nKnots cosinor Fixed setting attributes data.tables Fixed input check getDiffRhythmStats","code":""},{"path":"https://limorhyde2.hughylab.org/news/index.html","id":"limorhyde2-0009015","dir":"Changelog","previous_headings":"","what":"limorhyde2 0.0.0.9015","title":"limorhyde2 0.0.0.9015","text":"Revamped input checking use checkmate package","code":""}]
